{"version":3,"sources":["component/Square/index.js","component/Board/index.js","component/Game/index.js","index.js"],"names":["Square","background","onClick","value","className","style","Board","winLine","squares","col","row","renderSquare","i","includes","renderRow","indexRow","rowData","Array","fill","index","position","data","renderBoard","Game","status","numStep","useState","winner","colH","Number","rowH","history","setHistory","stepNumber","setStepNumber","xIsNext","setXIsNext","isDesc","setIsDesc","lines","j","stepI","stepJ","line","push","slice","step","findWinLine","selectedItem","move","desc","current","moves","map","text","length","sortTitle","class","newHistory","console","log","win","squaresWin","e","every","val","arr","calculateWinner","concat","Math","ceil","handleClick","reverse","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3500230.chunk.js","sourcesContent":["import React from \"react\"\r\nconst Square=({background,onClick,value})=>(\r\n    <button \r\n                className=\"square\" \r\n                onClick={()=>onClick()}\r\n                style={background?{background:'yellow'}:{background:'white'}}\r\n            >\r\n                {value}\r\n    </button>\r\n)\r\nexport default Square","import Square from \"../Square\";\r\nimport React from \"react\";\r\n\r\nconst Board=({winLine,squares,col,row,onClick})=>{\r\n    const renderSquare=(i)=>{\r\n        return(\r\n            <Square\r\n            background={winLine?winLine.includes(i)?true:false:false}\r\n            value={squares[i]}\r\n            onClick={()=>onClick(i)}\r\n            />\r\n        )\r\n        \r\n    }\r\n    const renderRow=(indexRow) =>{\r\n        let rowData= Array(col).fill(null)\r\n        for (let index = 0; index < col; index++) {\r\n            let position= (indexRow)*(col)+index;\r\n\r\n            rowData[index]=(\r\n                renderSquare(position)\r\n            )\r\n        }\r\n        return rowData;\r\n    }\r\n    const renderBoard=() =>{\r\n        let data= Array(row).fill(null)\r\n        for (let index = 0; index < row; index++) {\r\n            data[index]=(\r\n                <div className=\"board-row\">\r\n                    {renderRow(index)}\r\n                </div>\r\n            )\r\n            \r\n        }\r\n        return data;\r\n    }\r\n\r\n    return (<div>{renderBoard()}</div>)\r\n    \r\n}\r\n\r\nexport default Board","import Board from \"../Board\"\r\nimport React, {useState } from \"react\"\r\n\r\n\r\nfunction findWinLine(numStep,row,col){\r\n    let lines=[]\r\n    \r\n    for (let i = 0; i < row; i++) {\r\n        \r\n        for (let j = 0; j < col; j++) {\r\n            //vertical\r\n            if((i+numStep)<=row){\r\n                let stepI=i;\r\n                let stepJ=j;\r\n                let line=Array(numStep);\r\n                for (let index = 0; index <numStep; index++) {\r\n                    line[index]=(stepI++)*col+stepJ;    \r\n                }\r\n                lines.push(line.slice())\r\n            }\r\n            //horizontal\r\n            if(j+numStep<=col){\r\n                let step=j;\r\n                let line=Array(numStep);\r\n                for (let index = 0; index <numStep; index++) {\r\n                    line[index]=i*col+step++;    \r\n                }\r\n                lines.push(line.slice())\r\n            }\r\n            //diagonal line\r\n            if(i+numStep<=row&&j+numStep<= col){\r\n                let stepI=i;\r\n                let stepJ=j;\r\n                let line=Array(numStep);\r\n                for (let index = 0; index <numStep; index++) {\r\n                    line[index]=(stepI++)*col+stepJ++;\r\n                }\r\n                lines.push(line.slice())\r\n              \r\n            }\r\n            if(i+numStep<=row && j-(numStep-1)>=0){\r\n                let stepI=i;\r\n                let stepJ=j;\r\n                let line=Array(numStep);\r\n                for (let index = 0; index <numStep; index++) {\r\n                    line[index]=(stepI++)*col+stepJ--;\r\n                }\r\n                lines.push(line.slice())\r\n            }\r\n             \r\n        }\r\n        \r\n    }\r\n    return lines;\r\n}\r\nfunction calculateWinner(squares,lines){\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const win=lines[i];\r\n      let squaresWin=win.map(e=>squares[e])\r\n\r\n      if(squaresWin.every((val,i,arr)=>val===arr[0]&&val)){\r\n          return {winner: squaresWin[0],winLine:win}\r\n      }\r\n    }\r\n    return null;\r\n}\r\n\r\nconst Game =({col,row,numStep})=>{\r\n    const [history,setHistory]=useState([{\r\n            squares:Array(row*col).fill(null),\r\n            winLine:Array(numStep).fill(null),\r\n            winner:\"\",\r\n            colH:Number(-1),\r\n            rowH:Number(-1),\r\n    }])\r\n    const [stepNumber,setStepNumber]=useState(0)\r\n    const [xIsNext,setXIsNext]=useState(true)\r\n    const [isDesc,setIsDesc]=useState(true)\r\n    const lines=findWinLine(numStep,row,col)\r\n\r\n    const handleClick=(i)=>{\r\n        const newHistory=history.slice(0,stepNumber+1);\r\n        const current = newHistory[newHistory.length-1]\r\n        const squares=current.squares.slice();\r\n        \r\n        if(current.winner.length>0||squares[i]){\r\n            return;\r\n        }\r\n        console.log(i)\r\n        squares[i]=xIsNext?\"X\":\"O\"\r\n        const win=calculateWinner(squares,lines)\r\n\r\n        setHistory(newHistory.concat(\r\n            {\r\n                squares:squares,\r\n                colH:(i%col)===0?col-1:i%col-1,\r\n                rowH:Math.ceil(i/col)-1,\r\n                winLine:win?win.winLine:null,\r\n                winner:win?win.winner:\"\"\r\n            }\r\n        ))\r\n        setStepNumber(newHistory.length)\r\n        setXIsNext(!xIsNext)\r\n    }\r\n    const jumpTo=(step)=>{\r\n        setStepNumber(step)\r\n        setXIsNext(step%2===0)\r\n       \r\n    }\r\n    const selectedItem=(move,desc)=>{\r\n        if(move===stepNumber){\r\n            return(\r\n                <strong>{desc}</strong>\r\n            )\r\n        }\r\n        else{\r\n            return(desc)\r\n        }\r\n    }\r\n    const sort=()=>{\r\n        setIsDesc(!isDesc)\r\n    }\r\n\r\n    const current= history[stepNumber]\r\n    const winner=current.winner\r\n    const moves = history.map((move,index) => {\r\n        const text = \r\n            index?'Go to move #' +index+ \" (\"+history[index].colH+\", \"+history[index].rowH+\")\":\"Go to game start\"\r\n            \r\n        return (\r\n            <li key={index}>\r\n            <button onClick={() => jumpTo(index)}>{selectedItem(index,text)}</button>\r\n            </li>\r\n        );\r\n        });\r\n    \r\n    let status;\r\n    if(winner.length>0){\r\n        status= \"Winner: \"+winner;\r\n    }\r\n    else{\r\n        if(stepNumber===col*row){\r\n            status= \"Draw\"\r\n        }\r\n        else{\r\n            status=\"Next player: \"+(xIsNext?\"X\":\"O\");\r\n        }\r\n    }\r\n    let sortTitle=isDesc?\"Sort Descending\":\"Sort Acsending\"\r\n    return(\r\n        <div class=\"row\">\r\n            <div class=\"column\">\r\n                <div className=\"game\">\r\n                    <div className=\"game-board\">\r\n                        <Board\r\n                        col={col}\r\n                        row={row}\r\n                        numStep={numStep}\r\n                        squares={current.squares}\r\n                        winLine={current.winLine}\r\n                        onClick={(i)=>handleClick(i)}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"column\">\r\n                <div className=\"game-info\">\r\n                    <div class=\"row\">\r\n                        <div class =\"column\">\r\n                            <div>{status}</div>\r\n                        </div>\r\n                        <div class =\"column\">\r\n                            <button onClick={()=>sort()}>{sortTitle}</button>\r\n                        </div>\r\n                    </div>\r\n                    <ol>{isDesc?moves:moves.reverse()}</ol>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default Game","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport Game from '../src/component/Game'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Game\r\n    col={6}\r\n    row={6}\r\n    numStep={5}\r\n     />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}